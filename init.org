#+TITLE: Testing title

* Emacs Initial config

** Initialiation defaults

*** Setting default coding system

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

*** Setting default display and editing options

#+BEGIN_SRC emacs-lisp
  (set-default 'truncate-lines t)
  (global-hl-line-mode 1)
  (set-window-margins nil 0 0)
  (electric-pair-mode 1)
  (line-number-mode 0)
  (column-number-mode 0)
  (global-linum-mode 0)
  (setq inhibit-splash-screen t
        inhibit-startup-message t
        pop-up-frames nil
        visible-bell 'top-bottom
        ring-bell-function 'ignore
        transient-mark-mode t
        show-paren-mode 1
        make-backup-files nil
        auto-save-default nil
        vc-handled-backends nil)

(global-unset-key (kbd "C-x C-c"))
#+END_SRC

*** Set the titlebar to the color of the theme

#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
    (add-to-list 'default-frame-alist '(ns-appearance . light))
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t)))
#+END_SRC

*** TODO Setting title format

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
    '("Emacs - " (buffer-file-name "%f"
    ' (dired-directory dired-directory "%b"))))
#+END_SRC

*** Seting up package system and bootstrapping use-package

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

  (when (< emacs-major-version 24)
    (add-to-list 'package-archives
                 '("gnu" . "http://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

*** System specyfic defaults 

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (defvar ls-lisp-use-insert-directory-program)
    (defvar powerline-image-apple-rgb)
    (setq ns-use-srgb-colorspace t)
    (setq powerline-image-apple-rgb t)
    (require 'ls-lisp)
    (setq ls-lisp-use-insert-directory-program nil))
#+END_SRC

** Packages

*** Auto minor-mode

#+BEGIN_SRC emacs-lisp
  (use-package auto-minor-mode
    :ensure t)
#+END_SRC

*** Mac Only - initialize emacs with proper PATH

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :ensure t
    :config
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "GOPATH"))
#+END_SRC

*** Load theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :init
    (load-theme 'doom-molokai t))
#+END_SRC

*** Better defaults

#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :ensure t)
#+END_SRC

*** Fixing line highlighting when showing line numbers

#+BEGIN_SRC emacs-lisp
  (use-package nlinum-hl
    :ensure t
    :config (setq nlinum-highlight-current-line t))
#+END_SRC

*** Key suffixes popup

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)
    :config
    (setq which-key-popup-type 'side-window
          which-key-side-window-location 'right
          which-key-side-window-max-width 0.33
          which-key-side-window-max-height 0.25))
#+END_SRC

*** Zooming on active windows

#+BEGIN_SRC emacs-lisp
  (use-package zoom
    :ensure t
    :init
    (zoom-mode)
    :config
    (setq zoom-size '(0.618 . 0.618)
          zoom-ignored-major-modes '(ranger-mode)
          zoom-ignored-buffer-name-regexps '("^\\*helm" "^\\*which-key*")))
#+END_SRC

*** Editing forms in chrome

#+BEGIN_SRC emacs-lisp
  (use-package atomic-chrome
    :ensure t)
#+END_SRC

*** Better help dialogs

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :ensure t
    :bind (("C-h f"  . helpful-callable)
           ("C-h v"  . helpful-variable)
           ("C-h k"  . helpful-key)))
#+END_SRC

*** Better list-package mode

#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :ensure t
    :config
    (paradox-enable))

#+END_SRC

*** Cycling between different var notations

#+BEGIN_SRC emacs-lisp
  (use-package string-inflection
    :ensure t
    :bind
    ("C-c C-u" . string-inflection-all-cycle))
#+END_SRC

*** Open dash at point

#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point
    :ensure t
    :bind
    ("C-c d" . dash-at-point)
    ("C-c e" . dash-at-point-with-docset))
#+END_SRC

*** Move lines using alt + arrows

#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :ensure t
    :config
    (move-text-default-bindings))
#+END_SRC

*** Anzu - current match / all matches in modeline

#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t
    :init
    (global-anzu-mode +1)
    :bind
    ("M-%" . anzu-query-replace)
    ("C-M-%" . anzu-query-replace-regexp))
#+END_SRC

*** Spaceline

#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :init
    (spaceline-emacs-theme)
    ;; (defvar powerline-default-separator)
    (setq powerline-default-separator 'wave)
    ;; (defadvice vc-mode-line (after strip-backend () activate)
    ;;   (when (stringp vc-mode)
    ;;     (let ((gitlogo (replace-regexp-in-string "^ git." " ï„¦ " vc-mode)))
    ;;       (setq vc-mode gitlogo))))

    :config
    (spaceline-compile)
    (spaceline-helm-mode)
    (spaceline-info-mode)
    (setq spaceline-minor-modes-p nil
          spaceline-separator-dir-left '(left . left)
          spaceline-separator-dir-right '(right . right)
          spaceline-workspace-numbers-unicode t
          spaceline-window-numbers-unicode t
          spaceline-highlight-face-func 'spaceline-highlight-face-default))

#+END_SRC

*** Magit - best git client evet

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    :config
    (setq magit-process-finish-apply-ansi-colors t
          magit-refresh-status-buffer nil
          auto-revert-buffer-list-filter 'magit-auto-revert-repository-buffers-p)
    (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

*** Abbrev 

#+BEGIN_SRC emacs-lisp
  (use-package abbrev
    :diminish abbrev-mode
    :config
    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file)))
#+END_SRC

*** Snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all)
    :hook (prog-mode . yas-minor-mode))
#+END_SRC

*** Auto completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (global-company-mode)
    :bind
    ("C-." . company-complete)
    ("C-c /" . 'company-files)
    :config
    (setq company-idle-delay 0.3
          company-tooltip-limit 15
          company-minimum-prefix-length 1
          company-tooltip-flip-when-above t
          company-tooltip-align-annotations t
          company-backends '()))
#+END_SRC

*** Key statistics

#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :ensure t
    :config
    (setq keyfreq-excluded-commands
          '(
            mwheel-scroll
            self-insert-command
            forward-char
            left-char
            right-char
            backward-char
            previous-line
            next-line))

    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC

*** PDF Tools, exporting to pdf, etc

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config 
    (pdf-loader-install))
#+END_SRC

*** Prettier

#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :minor ("\\.js" . prettier-js-mode))
#+END_SRC

*** File types

**** Orgfiles

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :config
    (setq 
     org-startup-indented t
     org-indent-indentation-per-level 1))
#+END_SRC


***** Htmlize for org-mode

#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC

**** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode "\\.yaml")
#+END_SRC

**** GO

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :mode "\\.go"
    :interpreter "go"
    :config
    (require 'go-mode-autoloads)
    (add-hook 'go-mode-hook
              (lambda ()
                (add-hook 'before-save-hook 'gofmt-before-save)
                (add-to-list (make-local-variable 'company-backends)
                             '(company-go :width company-yasnippet :separate))
                (local-set-key (kbd "M-.") 'godef-jump))))
#+END_SRC

**** JSON

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :mode "\\.json$"
    :interpreter "json"
    :config
    (setq js-indent-level 2))

#+END_SRC

**** CSS

#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :ensure t
    :mode "\\.css"
    :config
    :hook (css-mode . (lambda ()
                (add-to-list (make-local-variable 'company-backends)
                             '(company-css :width company-yasnippet :separate)))))
#+END_SRC

**** SCSS

#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :ensure t
    :mode "\\.scss")
#+END_SRC

**** Py

#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :ensure t
    :mode "\\.py"
    :interpreter "py"
    :config
    (use-package company-jedi)
    (add-hook 'python-mode-hook
              (lambda ()
                (add-to-list (make-local-variable 'company-backends)
                             '(company-jedi :width company-yasnippet :separate)))))
#+END_SRC

**** 
