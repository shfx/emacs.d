#+TITLE: ~.emacs.d~

* Synopsis

Emacs configuration files written with the help of [[https://orgmode.org/][org-mode]] and [[https://orgmode.org/worg/org-contrib/babel/][org-babel]]

* Install Emacs with ~homebrew~

#+BEGIN_SRC shell
brew install emacs-plus@28 --with-mailutils --with-no-frame-refocus --with-xwidgets --with-native-comp
#+END_SRC

To start a bg service, run:

#+BEGIN_SRC xml
brew services start d12frosted/emacs-plus/emacs-plus@28
#+END_SRC

* Tidy up .emacs.d mess

#+begin_src emacs-lisp
(use-package no-littering)
#+end_src

* Better package management

** paradox ([[https://github.com/Malabarba/paradox/][link]])

Better list-package mode

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :custom
  (paradox-github-token t)
  :config
  (paradox-enable))
#+END_SRC

** quelpa ([[https://github.com/quelpa/quelpa][link]])

#+begin_src emacs-lisp
  (use-package quelpa
    :ensure nil
    :init
    (unless (package-installed-p 'quelpa)
      (with-temp-buffer
        (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
        (eval-buffer)
        (quelpa-self-upgrade))))
#+end_src

** quelpa-use-package ([[https://github.com/quelpa/quelpa-use-package][link]])

#+begin_src emacs-lisp
  (use-package quelpa-use-package
    :ensure nil
    :init
    (quelpa
     '(quelpa-use-package
       :fetcher git
       :url "https://github.com/quelpa/quelpa-use-package.git"))
    (require 'quelpa-use-package))
#+end_src

** auto-minor-mode ([[https://github.com/joewreschnig/auto-minor-mode][link]])

#+BEGIN_SRC emacs-lisp
(use-package auto-minor-mode)
#+END_SRC

** system-package ([[https://github.com/emacs-straight/system-packages][link]])

#+BEGIN_SRC emacs-lisp
(use-package system-packages
  :custom
  (system-packages-package-manager 'brew))
#+END_SRC

** use-package-ensure-system-package ([[https://github.com/waymondo/use-package-ensure-system-package][link]])

#+begin_src emacs-lisp
(use-package use-package-ensure-system-package
  :after system-packages)
#+end_src

* Initialiation defaults

** better-defaults ([[https://github.com/technomancy/better-defaults][link]])

#+BEGIN_SRC emacs-lisp
(use-package better-defaults
  :config
  (ido-mode 0))
#+END_SRC

** async ([[https://github.com/jwiegley/emacs-async][link]])

#+begin_src emacs-lisp
(use-package async
  :config
  (dired-async-mode 1))
#+end_src

** auth-source

#+begin_src emacs-lisp
(use-package auth-source
  :no-require t
  :custom
  (auth-sources '("~/.authinfo.gpg")))
#+end_src

** Measure startup time

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC

** Starting the server if not already started

#+begin_src emacs-lisp
(if (and (fboundp 'server-running-p)
         (not (server-running-p)))
   (server-start))
#+end_src

** Electric pairs only for prog-mode

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook
          (lambda ()
            (electric-pair-mode 1)))
#+end_src

** Focus new frame

#+begin_src emacs-lisp
(when (featurep 'ns)
  (defun ns-raise-emacs ()
    "Raise Emacs."
    (ns-do-applescript "tell application \"Emacs\" to activate"))

  (defun ns-raise-emacs-with-frame (frame)
    "Raise Emacs and select the provided frame."
    (with-selected-frame frame
      (when (display-graphic-p)
        (ns-raise-emacs))))

  (add-hook 'after-make-frame-functions 'ns-raise-emacs-with-frame)
  (when (display-graphic-p)
    (ns-raise-emacs)))
#+end_src

** Errors handling and ignore server errors

When running as a deamon emacs checks if custom.el is in safe place. Here were
setting custom.el in ~/tmp~ dir and it will sometimes throw an
errors. Here is a dirty hack.

#+BEGIN_SRC emacs-lisp
(defadvice server-ensure-safe-dir
    (around
     my-around-server-ensure-safe-dir
     activate)
  "Ignores any errors raised from server-ensure-safe-dir"
  (ignore-errors ad-do-it))
#+end_src

Disable native-compile warnings when starting emacs. Warnings should
not break the init of Emacs.

#+begin_src emacs-lisp
(setq warning-minimum-level :error)
#+end_src

** Setting default coding system

#+BEGIN_SRC emacs-lisp
(set-language-environment 'utf-8)
(set-keyboard-coding-system 'utf-8-mac) ; For old Carbon emacs on OS X only
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

** Setting default display and editing options

#+BEGIN_SRC emacs-lisp
(use-package desktop
  :ensure nil
  :custom
  (desktop-save 'ask-if-new)
  (desktop-restore-eager 5)
  (desktop-load-locked-desktop t)
  (desktop-auto-save-timeout 30)
  (desktop-base-lock-name "lock")
  (desktop-files-not-to-save "^$")
  :config
  (desktop-save-mode 1))

(use-package emacs
  :ensure nil
  :hook
  (shell-mode ansi-color-for-comint-mode-on)
  :custom
  (auto-save-default nil)
  (compilation-scroll-output t)
  (create-lockfiles nil)
  (frame-resize-pixelwise t)
  (frame-title-format nil)
  (inhibit-startup-echo-area-message user-login-name)
  (inhibit-startup-message t)
  (inhibit-startup-screen t)
  (inhibit-compacting-font-caches t)
  (highlight-nonselected-windows nil)
  (ffap-machine-p-known 'reject)
  (bidi-inhibit-bpa t)
  (fast-but-imprecise-scrolling t)
  (initial-major-mode 'fundamental-mode)
  (left-fringe-width  16)
  (make-backup-files nil)
  (ns-right-alternate-modifier nil)
  (ns-use-proxy-icon nil)
  (pop-up-frames nil)
  (right-fringe-width  16)
  (ring-bell-function 'ignore)
  (scroll-step 1)
  (show-paren-mode 1)
  (fast-but-imprecise-scrolling t)
  (scroll-conservatively 101)
  (scroll-margin 0)
  (scroll-preserve-screen-position t)
  (show-trailing-whitespace nil)
  (split-height-threshold 80)
  (split-width-threshold 160)
  (transient-mark-mode t)
  (use-dialog-box nil)
  (vc-handled-backends nil)
  (visible-bell t)
  (indent-tabs-mode nil)
  (apropos-do-all t)
  (cursor-in-non-selected-windows nil)

  :config
  (pixel-scroll-precision-mode 1)
  (set-default 'truncate-lines t)
  (global-hl-line-mode 0)
  (set-window-margins nil 0 0)
  (electric-pair-mode 0)
  (line-number-mode 1)
  (column-number-mode 1)
  (delete-selection-mode 1)
  (global-auto-revert-mode 1)
  (menu-bar-mode 0)
  (save-place-mode 1)

  ;; Better support for files with long lines
  (setq-default bidi-paragraph-direction 'left-to-right)
  (setq-default bidi-inhibit-bpa t)
  (global-so-long-mode 1)

  (advice-add #'tty-run-terminal-initialization :override #'ignore)
  (advice-add #'display-startup-echo-area-message :override #'ignore))

(setq remote-file-name-inhibit-cache nil)
(setq vc-ignore-dir-regexp
      (format "%s\\|%s"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp))
(setq tramp-verbose 1)

(fset 'yes-or-no-p 'y-or-n-p)

;;http://mbork.pl/2021-11-13_y-or-n-p_but_with_RET_meaning_yes
(defconst y-or-n-p-ret-yes-map
  (let ((map (make-sparse-keymap)))
    (set-keymap-parent map y-or-n-p-map)
    (define-key map [return] 'act)
    map)
  "A keymap for y-or-n-p with RET meaning \"yes\".")

(setq y-or-n-p-map y-or-n-p-ret-yes-map)

(global-unset-key (kbd "C-x C-c"))
(global-unset-key (kbd "s-w"))
(global-unset-key (kbd "C-x C-z"))
(global-unset-key (kbd "C-<wheel-up>"))
(global-unset-key (kbd "C-<wheel-down>"))
(global-unset-key (kbd "<mouse-2>"))
(global-unset-key (kbd "s-t"))

;; Make shebang (#!) file executable when saved
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

;; font sizes
(global-set-key
 (kbd "s-=")
 (lambda ()
   (interactive)
   (let ((old-face-attribute (face-attribute 'default :height)))
     (message (format "Changed font size to %d" (+ old-face-attribute 10)))
     (set-face-attribute 'default nil :height (+ old-face-attribute 10)))))

(global-set-key
 (kbd "s--")
 (lambda ()
   (interactive)
   (let ((old-face-attribute (face-attribute 'default :height)))
     (message (format "Changed font size to %d" (- old-face-attribute 10)))
     (set-face-attribute 'default nil :height (- old-face-attribute 10)))))

(global-set-key "\C-l" 'goto-line)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "M-s-<right>") 'tab-next)
(global-set-key (kbd "M-s-<left>") 'tab-previous)
#+END_SRC

** Comint

#+begin_src emacs-lisp
(use-package comint
  :ensure nil
  :config
  (add-to-list 'comint-output-filter-functions 'ansi-color-process-output))
#+end_src

** Compiation

#+begin_src emacs-lisp
(defun colorize-compilation-buffer ()
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))

(use-package compilation-mode
  :ensure nil
  :hook
  (compilation-filter . colorize-compilation-buffer))
#+end_src

** Alerter - notifications for macos

#+begin_src emacs-lisp
(defun alerter--symbol-value (symbol)
  "Stripts keyword symbol name from a colon"
  (replace-regexp-in-string "^:" "" (symbol-name symbol)))

(defun alerter--option (args)
  "Returns a function that will generate single argument for alerter using ARGS as a string"
  (lambda (key)
    (concat "-" (alerter--symbol-value key) " " (plist-get args key))))

(setq alerter-default-args
      '(:title "Emacs" :sender "org.gnu.Emacs" :timeout "5"))

(defun alerter (message &rest args)
  "Notify user using native macOS notifications. MESSAGE will be displayed using alerter package, with additional ARGS"
  (if (executable-find "alerter")
      (let* ((args (append alerter-default-args args))
             (options (seq-filter (lambda (element) (keywordp element)) args))
             (config (mapconcat (alerter--option args) options " "))
             (cmd (concat "alerter " config " -message \"" (replace-regexp-in-string "\"" "\\\"" message  t t) "\" &")))
        (message cmd)
        (call-process-shell-command cmd))
    (error "Can't find alerter executable")))
#+end_src

** Check on save if config is valid

#+begin_src emacs-lisp
(setq check-if-config-valid-files '("init.el" "early-init.el" "README.org"))

(defun check-if-config-valid ()
  (alerter "Checking config..." :group "check-config" )
  (async-start (lambda ()
                 (call-process-shell-command "./scripts/validate"))
               (lambda (results)
                 (if (< 0 results )
                     (alerter "Problem with emacs config!" :group "check-config" :sound "funky" )
                   (alerter "Config valid!" :group "check-config" )))))

(defun current-file-is-config ()
  (member t (mapcar (lambda (file)
                      (message (expand-file-name file user-emacs-directory))
                      (message (buffer-file-name))
                      (equal (expand-file-name file user-emacs-directory) (buffer-file-name))) check-if-config-valid-files)))

(add-hook 'after-save-hook
          (lambda ()
            (if (current-file-is-config)
                (check-if-config-valid))))
#+end_src
** xwidget-webkit problem with emacsclient

We need to redefine ~xwidget-webkit-enable-plugins~ variable for webkit
to work properly

#+begin_src emacs-lisp
(if (boundp 'xwidget-webkit-enable-plugins)
      (setq xwidget-webkit-enable-plugins t)
  (defvar xwidget-webkit-enable-plugins t))
#+end_src

** Windmove

#+begin_src emacs-lisp
(use-package windmove
  :ensure nil
  :init
  (windmove-default-keybindings 'super)
  (windmove-swap-states-default-keybindings (list 'super 'control))
  (winner-mode 1))
#+end_src

** Default trash behavior

#+BEGIN_SRC emacs-lisp
(use-package osx-trash
  :if (eq system-type 'darwin)
  :ensure-system-package trash
  :init
  (osx-trash-setup)
  :custom
  (delete-by-moving-to-trash t))
#+END_SRC

** System specific defaults

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (defvar ls-lisp-use-insert-directory-program)
  (defvar powerline-image-apple-rgb)
  (setq ns-use-srgb-colorspace t)
  (setq powerline-image-apple-rgb t)
  (require 'ls-lisp)
  (setq ls-lisp-use-insert-directory-program nil))
#+END_SRC

** Disabling suspend-frame binding

Very annoying binding, lets get rid of it.

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z"))
#+END_SRC

** Browser Url

Set build-in module defaults to handle chrome as a default browser

#+BEGIN_SRC emacs-lisp
(use-package browse-url
  :custom
  (browse-url-browser-function 'browse-url-default-browser))

(use-package browse-url-dwim
  :config
  (browse-url-dwim-mode 1))
#+END_SRC

** Mac Only - initialize emacs with proper PATH

Move your env variables to ~.zshenv~ befre setting this up

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :custom
  (exec-path-from-shell-arguments nil)
  :config
  (when (or (memq window-system '(ns x))
            (daemonp))
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "GOPATH")
    (when (eq (length (getenv "NODE_PATH")) 0)
      (setenv "NODE_PATH" "/usr/local/lib/node_modules"))))
#+END_SRC

** EasyGP Assistant

#+begin_src emacs-lisp
(use-package epa
  :if (eq system-type 'darwin)
  :ensure-system-package (gpg pinentry-mac)
  :custom
  (epa-file-encrypt-to '("shfx@shfx.pl"))
  (password-cache-expiry (* 60 15))
  (epa-file-select-keys nil)
  (epg-pinentry-mode 'loopback))

(use-package epa
  :if (eq system-type 'gnu/linux)
  :custom
  (epa-file-encrypt-to '("shfx@shfx.pl"))
  (password-cache-expiry (* 60 15))
  (epa-file-select-keys nil)
  (epg-pinentry-mode 'loopback))
#+end_src

when starting, we should prepare our [[https://cerb.ai/guides/mail/gpg-setup-on-mac/][gpg config]]

#+begin_src sh
gpg --list-keys
echo "pinentry-program /opt/homebrew/bin/pinentry-mac" >> $HOME/.gnupg/gpg-agent.conf
gpg --expert --full-generate-key
#+end_src

https://alexschroeder.ch/wiki/2016-03-17_GPG_Agent_and_Emacs

* Window and frame management

** Pooper (link)

#+begin_src emacs-lisp
(use-package popper
  :ensure t ; or :straight t
  :bind (("s-§"          . popper-toggle-latest)
         ("M-§"          . popper-cycle)
         ("s-M-§"        . popper-toggle-type)
         ("s-<escape>"   . popper-toggle-latest)
         ("M-<escape>"   . popper-cycle)
         ("C-M-<escape>" . popper-toggle-type))
  :custom
  (popper-reference-buffers
   '("\\*Messages\\*"
     "Output\\*$"
     "\\*Async Shell Command\\*"
     compilation-mode
     vterm-mode))
  (popper-mode-line '(:eval
                      (propertize " POP " 'face 'mode-line-emphasis)))
  :config
  (popper-mode +1)
  (popper-echo-mode +1))
#+end_src

** Dimmer

#+begin_src emacs-lisp
(use-package dimmer
  :custom
  (dimmer-adjustment-mode :foreground)
  (dimmer-fraction 0.2)
  (dimmer-use-colorspace :cielab)
  :config
  (dimmer-configure-which-key)
  (dimmer-mode t))
#+end_src

** Shackle ([[https://github.com/wasamasa/shackle][link]])

*Shackle* gives you the means to put an end to popped up buffers not
behaving they way you'd like them to. By setting up simple rules you
can for instance make Emacs always select help buffers for you or make
everything reuse your currently selected window.

#+BEGIN_SRC emacs-lisp
(use-package shackle
  :custom
  (shackle-rules
   '(("*eshell*"               :select t   :other t)
     (flycheck-error-list-mode :select t   :align below :size 0.25)
     (compilation-mode         :select nil :align below :size 0.25)
     (messages-buffer-mode     :select t   :align below :size 0.25)
     (inferior-emacs-lisp-mode :select t   :align below :size 0.25)
     ("*rg*"                   :select t   :other t)
     (" *Deletions*"           :select t   :align below :size 0.25)
     (" *Marked Files*"        :select t   :align below :size 0.25)
     ("*Org Select*"           :same t)
     ("*Org Note*"             :select t   :align below :size 0.33)
     ("*Org Links*"            :select t   :align below :size 0.2)
     (" *Org todo*"            :select t   :align below :size 0.2)
     ("*Man.*"                 :select t   :align below :size 0.5  :regexp t)
     ("*Org Src.*"             :select t   :align right :size 0.5  :regexp t)))
  :config
  (shackle-mode t))
#+END_SRC

** TabBar

#+begin_src emacs-lisp
(use-package tab-bar
  :ensure nil
  :custom
  ;; Do not show buttons.
  (tab-bar-new-button-show nil)
  (tab-bar-close-button-show nil)
  (tab-bar-tab-hints t)
  (tab-bar-separator (if (display-graphic-p)
                              "    "
                            " ")))
#+end_src

** TabLine

#+begin_src emacs-lisp
(use-package tab-line
  :ensure nil
  :custom
  (tab-line-separator "|")
  (tab-line-close-button-show nil)
  (tab-line-new-button-show nil))
#+end_src

* List filtering helpers

** Vertico ([[https://github.com/minad/vertico][link]])

Some of the config is borrowed straight from [[https://kristofferbalintona.me/posts/vertico-marginalia-all-the-icons-completion-and-orderless/][Kristoffer Balintonas blog post]] from 

#+begin_src emacs-lisp
(defun my/vertico-multiform-flat-toggle ()
  "Toggle between flat and reverse."
  (interactive)
  (vertico-multiform--display-toggle 'vertico-flat-mode)
  (if vertico-flat-mode
      (vertico-multiform--temporary-mode 'vertico-reverse-mode -1)
    (vertico-multiform--temporary-mode 'vertico-reverse-mode 1)))

(defun my/vertico-quick-embark (&optional arg)
  "Embark on candidate using quick keys."
  (interactive)
  (when (vertico-quick-jump)
    (embark-act arg)))

(use-package vertico
  :demand t
  :hook ((rfn-eshadow-update-overlay . vertico-directory-tidy)
         (minibuffer-setup . vertico-repeat-save))
  :bind (:map vertico-map
              ("<tab>" . vertico-insert)
              ("<escape>" . minibuffer-keyboard-quit)
              ("?" . minibuffer-completion-help)
              ("C-M-n" . vertico-next-group)
              ("C-M-p" . vertico-previous-group)
              ("M-o" . my/vertico-quick-embark)
              ("C-l" . my/vertico-multiform-flat-toggle)
              ("C-i" . vertico-quick-insert)
              ("C-o" . vertico-quick-exit)
              ("M-G" . vertico-multiform-grid)
              ("M-F" . vertico-multiform-flat)
              ("M-R" . vertico-multiform-reverse)
              ("M-U" . vertico-multiform-unobtrusive)
              ("<backspace>" . vertico-directory-delete-char)
              ("C-w" . vertico-directory-delete-word)
              ("C-<backspace>" . vertico-directory-delete-word)
              ("RET" . vertico-directory-enter))

  :custom ((vertico-resize t)
           (vertico-cycle t)
           (vertico-grid-separator "        ")
           (vertico-grid-lookahead 50)
           (vertico-buffer-display-action '(display-buffer-reuse-window))
           ;;
           (vertico-multiform-categories
            '((file reverse)
              (consult-grep buffer)
              ;; TODO: Check what `consult-location` is exactly
              (consult-location)
              (imenu buffer)
              (library indexed)
              (org-roam-node indexed)
              (t)))
           ;;
           (vertico-multiform-commands
            '(("flyspell-correct-*" grid reverse)
              (org-refile grid reverse indexed)
              (consult-yank-pop indexed)
              (consult-flycheck)
              (consult-lsp-diagnostics))))
  :config
  ;; Workaround for problem with `tramp' hostname completions. This overrides
  ;; the completion style specifically for remote files! See
  ;; https://github.com/minad/vertico#tramp-hostname-completion
  (defun mw/basic-remote-try-completion (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-try-completion string table pred point)))
  (defun mw/basic-remote-all-completions (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-all-completions string table pred point)))
  (add-to-list 'completion-styles-alist
               '(basic-remote           ; Name of `completion-style'
                 mw/basic-remote-try-completion mw/basic-remote-all-completions nil))


  (vertico-mode 1)
  (vertico-multiform-mode 1))
#+end_src

also helpful emacs config just for vertico

#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  :hook
  (minibuffer-setup . cursor-intangible-mode)

  :custom
  ;; Do not allow the cursor in the minibuffer prompt
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt))
  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (read-extended-command-predicate
        #'command-completion-default-include-p)
  ;; Enable recursive minibuffers
  (enable-recursive-minibuffers t))
#+end_src

#+begin_src emacs-lisp
(use-package recursion-indicator
  :demand t
  :config
  (recursion-indicator-mode))
#+end_src

** Orderless ([[https://github.com/oantolin/orderless][link]])

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Savehist

#+begin_src emacs-lisp
(use-package savehist
  :after no-littering
  :init
  (savehist-mode))
#+end_src

** Consult ([[https://github.com/minad/consult][link]])

#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  :after projectile
  :demand t
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s F" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

  ;; Enable automatic preview at point in the *Completions* buffer.
  ;; This is relevant when you use the default completion UI,
  ;; and not necessary for Vertico, Selectrum, etc.

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-buffer consult--source-project-buffer consult--source-bookmark
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root))
#+end_src

** Consult Projectile ([[https://github.com/emacsmirror/consult-projectile][link]])

#+begin_src emacs-lisp
(use-package consult-projectile
  :demand t
  :after (consult projectile)
  :bind-keymap ("C-c p" . projectile-command-map)
  :bind (:map projectile-command-map
              ("p" . consult-projectile))
  :custom
  (projectile-switch-project-action 'consult-projectile))
#+end_src

** Consult flycheck ([[https://github.com/minad/consult-flycheck][link]])

#+begin_src emacs-lisp
(use-package consult-flycheck)
#+end_src

** Consult Dir ([[https://github.com/karthink/consult-dir][link]])

#+begin_src emacs-lisp
(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+end_src

** pcmpl-args

#+begin_src emacs-lisp
(use-package pcmpl-args)
#+end_src

* Remote

** Tramp

#+begin_src emacs-lisp
(use-package tramp
  :ensure nil
  :custom
  (tramp-inline-compress-start-size 1000)
  (tramp-copy-size-limit 10000)
  (vc-handled-backends '(Git))
  (tramp-default-method "scp")
  (tramp-use-ssh-controlmaster-options nil)
  (projectile--mode-line "Projectile")
  (tramp-verbose 1))
#+end_src

* Packages

** Ledger

#+begin_src emacs-lisp
(use-package ledger-mode
  :ensure-system-package ledger)
#+end_src

** Bufler

#+begin_src emacs-lisp
(use-package bufler
  :quelpa (bufler :fetcher github :repo "alphapapa/bufler.el"
                  :files (:defaults (:exclude "helm-bufler.el")))
  :bind
  ("C-x b" . bufler-switch-buffer)
  ("C-x C-b" . bufler-list)
  :custom
  (bufler-workspace-switch-buffer-sets-workspace t))
#+end_src

** Eshell ([[https://masteringemacs.org/article/complete-guide-mastering-eshell][link]])

*Eshell* is a shell written entirely in Emacs-Lisp, and it replicates
most of the features and commands from GNU CoreUtils and the
Bourne-like shells. So by re-writing common commands like ls and cp in
Emacs-Lisp, Eshell will function identically on any environment Emacs
itself runs on.

#+BEGIN_SRC emacs-lisp
(use-package eshell
  :custom
  (eshell-banner-message "")
  (eshell-scroll-to-bottom-on-input t)
  (eshell-error-if-no-glob t)
  (eshell-hist-ignoredups t)
  (eshell-save-history-on-exit t)
  (eshell-prefer-lisp-functions nil)
  (eshell-destroy-buffer-when-process-dies t)
  (eshell-highlight-prompt nil)

  :config
  (setenv "PAGER" "cat")
  (setenv "PATH"
          (concat
           "/usr/local/bin:/usr/local/sbin:"
           (getenv "PATH")))

  (defun eshell/gst (&rest args)
    (magit-status (pop args) nil)
    (eshell/echo)))

(use-package xterm-color
  :after (eshell eshell-toggle)
  :hook
  (eshell-before-prompt . (lambda ()
                            (setq xterm-color-preserve-properties t)))
  (eshell-preoutput-filter-functions . xterm-co§§§§§§§§§§§§lor-filter)
  (shell-mode . (lambda ()
                  ;; Disable font-locking in this buffer to improve performance
                  (font-lock-mode -1)
                  ;; Prevent font-locking from being re-enabled in this buffer
                  (make-local-variable 'font-lock-function)
                  (setq font-lock-function (lambda (_) nil))
                  (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))
  :custom
  (comint-output-filter-functions
   (remove 'ansi-color-process-output comint-output-filter-functions))
  (eshell-output-filter-functions
   (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
  :config)

(use-package eshell-up
  :after eshell)

(use-package shrink-path
  :after eshell
  :custom
  ((eshell-prompt-regexp "^.*❯ ")
   (eshell-prompt-function
    (lambda nil
      (let ((base/dir (shrink-path-prompt default-directory)))
        (concat (propertize (car base/dir)
                            'face 'font-lock-comment-face)
                (propertize (cdr base/dir)
                            'face 'font-lock-constant-face)
                (propertize " ❯" 'face 'eshell-prompt-face)
                ;; needed for the input text to not have prompt face
                (propertize " " 'face 'default)))))))
#+END_SRC

** Toogle undecorated frame

#+BEGIN_SRC emacs-lisp
(defun toggle-frame-maximized-undecorated ()
  (interactive)
  (let* ((frame (selected-frame))
         (on? (and (frame-parameter frame 'undecorated)
                   (eq (frame-parameter frame 'fullscreen) 'maximized)))
         (geom (frame-monitor-attribute 'geometry))
         (initial-x (first geom))
         (display-height (first (last geom))))
    (if on?
        (progn
          (set-frame-parameter frame 'undecorated nil)
          (toggle-frame-maximized))
      (progn
        (set-frame-position frame initial-x 0)
        (set-frame-parameter frame 'fullscreen 'maximized)
        (set-frame-parameter frame 'undecorated t)
        (set-frame-height frame (- display-height 26) nil t)
        (set-frame-position frame initial-x 0)))))
#+END_SRC

** Scratch ([[https://github.com/ieure/scratch-el][link]])

Scratch is an extension to Emacs that enables one to create scratch
buffers that are in the same mode as the current buffer. This is
notably useful when working on code in some language; you may grab
code into a scratch buffer, and, by virtue of this extension, do so
using the Emacs formatting rules for that language.

#+BEGIN_SRC emacs-lisp
(use-package scratch)
#+END_SRC

** Eshell Toggle ([[https://github.com/4DA/eshell-toggle][link]])

Simple functionality to show/hide eshell/ansi-term (or almost any
other buffer, see eshell-toggle-init-function description below) at
the bottom of active window with directory of its buffer.

#+BEGIN_SRC emacs-lisp
(use-package eshell-toggle
  :after eshell
  :bind
  ("s-`" . eshell-toggle)
  :custom
  (eshell-toggle-name-separator " ❯ ")
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t))
#+END_SRC

** ESUP

#+begin_src emacs-lisp
(use-package esup)
#+end_src

** vterm

#+BEGIN_SRC emacs-lisp
(defun dtache-vterm-send-input (&optional detach)
  "Create a `dtache' session."
  (interactive)
  (vterm-send-C-a)
  (let* ((input (buffer-substring-no-properties (point) (vterm-end-of-line)))
         (dtache-session-origin 'vterm)
         (dtache-session-action
          '(:attach dtache-shell-command-attach-session
                    :view dtache-view-dwim
                    :run dtache-shell-command))
         (dtache-session-mode
          (if detach 'create 'create-and-attach)))
    (vterm-send-C-k)
    (process-send-string vterm--process (dtache-dtach-command input t))
    (vterm-send-C-e)
    (vterm-send-return)))

(defun dtache-vterm-attach (session)
  "Attach to an active `dtache' session."
  (interactive
   (list
    (let* ((host-name (car (dtache--host)))
           (sessions
            (thread-last (dtache-get-sessions)
                         (seq-filter (lambda (it)
                                       (string= (car (dtache--session-host it)) host-name)))
                         (seq-filter (lambda (it) (eq 'active (dtache--determine-session-state it)))))))
      (dtache-completing-read sessions))))
  (let ((dtache-session-mode 'attach))
    (process-send-string vterm--process (dtache-dtach-command session t))
    (vterm-send-return)))

(defun dtache-vterm-detach ()
  "Detach from a `dtache' session."
  (interactive)
  (process-send-string vterm--process dtache--dtach-detach-character))

(use-package vterm
  :after consult
  :bind (:map vterm-mode-map
              ("<S-return>" . #'dtache-vterm-send-input)
              ("<C-return>" . #'dtache-vterm-attach)
              ("C-c C-d" . #'dtache-vterm-detach))
  :custom
  (vterm-always-compile-module t))

(use-package multi-vterm
  :after vterm)
#+END_SRC

** Marginalia

#+begin_src emacs-lisp
;; Enable richer annotations using the Marginalia package
(use-package marginalia
  :demand t
  :bind (:map minibuffer-local-map
         ("M-A" . marginalia-cycle))
  :config
  (marginalia-mode))
#+end_src

** Editor Config ([[https://github.com/editorconfig/editorconfig-emacs][link]])

*EditorConfig* helps maintain consistent coding styles for multiple
developers working on the same project across various editors and
IDEs. The EditorConfig project consists of a file format for defining
coding styles and a collection of text editor plugins that enable
editors to read the file format and adhere to defined
styles. EditorConfig files are easily readable and they work nicely
with version control systems.

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :init
  (editorconfig-mode 1))
#+END_SRC

** Posframe

#+BEGIN_SRC emacs-lisp
(use-package posframe
  :ensure t)
#+END_SRC

** goggles (link)

#+begin_src emacs-lisp
(use-package goggles
  :hook ((prog-mode text-mode) . goggles-mode)
  :custom
  (goggles-pulse t))
#+end_src

** Expand region

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+END_SRC

** launchctl

#+begin_src emacs-lisp
(use-package launchctl)
#+end_src

** Restart Emacs

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs)
#+END_SRC

** Paren

#+begin_src emacs-lisp
(use-package paren
  :hook (after-init-hook . show-paren-mode)
  :custom-face
  (show-paren-match ((t
                      (:weight ultra-bold :foreground "#b6e63e" :background "#3a4625"))))
  :custom
  (show-paren-style 'mixed)
  (show-paren-when-point-in-periphery t)
  (show-paren-when-point-inside-paren nil))
#+end_src

** Auto highlight symbol

#+begin_src emacs-lisp
(use-package auto-highlight-symbol
  :hook (prog-mode . auto-highlight-symbol-mode))
#+end_src

** All the icons ([[https://github.com/domtronn/all-the-icons.el][link]])

A utility package to collect various Icon Fonts and propertize them
within Emacs.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :custom
  (inhibit-compacting-font-caches t))
#+END_SRC

** Projectile ([[https://github.com/bbatsov/projectile][link]])

Projectile is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without
introducing external dependencies (when feasible)

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand t
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :custom
    (projectile-enable-caching t)
    (projectile-sort-order 'recently-active)
    :config
    (projectile-mode)
    ;; Projectile is testing in the reverse order so more specific must me at the end
    (projectile-register-project-type
     'npm '("package.json")
     :compile "npm i"
     :test "npm test"
     :run "npm start"
     :test-suffix ".spec.js")

    (projectile-register-project-type
     'opera '("desktop/BUILD.gn" "desktop/gn_opera.py")
     :project-file "desktop/BUILD.gn"
     :configure "$HOME/goma/goma_ctl.py ensure_start && desktop/gn_opera.py --release product=\\\"gx\\\" use_jumbo_build=false use_goma=true goma_dir=\"\\\"/Users/opera_user/goma\\\"\""
     :compile "autoninja -C chromium/src/out/Release opera"))
#+END_SRC

** ibuffer-projectile ([[https://github.com/purcell/ibuffer-projectile][link]])

#+begin_src emacs-lisp
(use-package ibuffer-projectile
  :hook
  (ibuffer . (lambda ()
               (ibuffer-projectile-set-filter-groups)
               (unless (eq ibuffer-sorting-mode 'alphabetic)
                 (ibuffer-do-sort-by-alphabetic)))))
#+end_src

** Embark ([[https://github.com/oantolin/embark/][link]])

#+begin_src emacs-lisp
(defun embark-which-key-indicator ()
  "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets."
  (lambda (&optional keymap targets prefix)
    (if (null keymap)
        (which-key--hide-popup-ignore-command)
      (which-key--show-keymap
       (if (eq (plist-get (car targets) :type) 'embark-become)
           "Become"
         (format "Act on %s '%s'%s"
                 (plist-get (car targets) :type)
                 (embark--truncate-target (plist-get (car targets) :target))
                 (if (cdr targets) "…" "")))
       (if prefix
           (pcase (lookup-key keymap prefix 'accept-default)
             ((and (pred keymapp) km) km)
             (_ (key-binding prefix 'accept-default)))
         keymap)
       nil nil t (lambda (binding)
                   (not (string-suffix-p "-argument" (cdr binding))))))))

(defun embark-hide-which-key-indicator (fn &rest args)
  "Hide the which-key indicator immediately when using the completing-read prompter."
  (which-key--hide-popup-ignore-command)
  (let ((embark-indicators
         (remq #'embark-which-key-indicator embark-indicators)))
    (apply fn args)))

(advice-add #'embark-completing-read-prompter
            :around #'embark-hide-which-key-indicator)

(use-package embark
  :after which-key
  :demand t
  :bind
  (("s-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :custom
  (embark-indicators
   '(embark-which-key-indicator
     embark-highlight-indicator
     embark-isearch-highlight-indicator))

  (prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Unbind help-command so completing-read interface can do it's job
  (unbind-key "C-h <help>" global-map)
  (unbind-key "C-h" help-map)
  ;;(unbind-key "C-h" ehelp-map)

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src

** Embark Consult ([[https://github.com/oantolin/embark/blob/master/embark-consult.el][link]])

Consult users will also want the embark-consult package.

#+begin_src emacs-lisp
(use-package embark-consult
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Corfu ([[https://github.com/minad/corfu][link]])

#+begin_src emacs-lisp
(defun corfu-lsp-setup ()
  (setq-local completion-styles '(orderless-fast)
              completion-category-defaults nil))

(defun orderless-fast-dispatch (word index total)
  (and (= index 0) (= total 1) (length< word 4)
       `(orderless-regexp . ,(concat "^" (regexp-quote word)))))

(orderless-define-completion-style orderless-fast
  (orderless-style-dispatchers '(orderless-fast-dispatch))
  (orderless-matching-styles '(orderless-literal orderless-regexp)))

(use-package corfu
  :demand t
  :hook (lsp-completion-mode-hook . corfu-lsp-setup)
  :bind (:map corfu-map
              ("C-n" . corfu-next)
              ("C-p" . corfu-previous)
              ("<escape>" . corfu-quit)
              ("<return>" . corfu-insert)
              ("M-d" . corfu-show-documentation)
              ("M-l" . corfu-show-location)
              ("H-SPC" . corfu-insert-separator)
              ("SPC" . corfu-insert-separator))
  :custom
  (completion-cycle-threshold nil)
  (corfu-auto t)
  (corfu-auto-delay 0.25)
  (corfu-auto-prefix 1)
  (corfu-count 14)
  (corfu-cycle nil)
  (corfu-echo-documentation t)
  (corfu-min-width 80)
  (corfu-max-width corfu-min-width)
  (corfu-preselect-first nil)
  (corfu-preview-current t)
  (corfu-quit-at-boundary t)
  (corfu-quit-no-match t)
  (corfu-scroll-margin 4)
  (corfu-separator ?\s)
  (tab-always-indent 'complete)
  (tab-first-completion 'word-or-paren-or-punct)
  :config
  (global-corfu-mode))

;; Use dabbrev with Corfu!
(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand)))
#+end_src

** Cape ([[https://github.com/minad/cape][link]])

#+begin_src emacs-lisp
(use-package cape
  ;; Bind dedicated completion commands
  :bind (("C-." . completion-at-point)
         ("C-c /" . completion-fil)
         ("C-c /" . completion-fil))
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword))

  ;; (add-to-list 'completion-at-point-functions #'cape-tex)
  ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
#+end_src

** corfu-doc (link)

#+begin_src emacs-lisp
(use-package corfu-doc
  :quelpa (corfu-doc :fetcher github :repo "galeo/corfu-doc")
  :after corfu
  :hook (corfu-mode . corfu-doc-mode)
  :bind (:map corfu-map
         ([remap corfu-show-documentation] . corfu-doc-toggle)
         ("M-n" . corfu-doc-scroll-up)
         ("M-p" . corfu-doc-scroll-down))
  :custom
  (corfu)
  (corfu-doc-delay 0.5)
  (corfu-doc-max-width 70)
  (corfu-doc-max-height 20)
  (corfu-echo-documentation nil))
#+end_src

** kind-icon ([[https://github.com/jdtsmith/kind-icon][link]])

#+begin_src emacs-lisp
(use-package kind-icon
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  (kind-icon-use-icons t)
  (kind-icon-blend-background nil)
  (kind-icon-blend-frac 0.08)
  ;; fix for no-littering package
  (svg-lib-icons-dir (no-littering-expand-var-file-name "svg-lib/cache/"))
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** K8s

#+BEGIN_SRC emacs-lisp
(use-package kubernetes
  :commands (kubernetes-overview)
  :custom
  ((kubernetes-commands-display-buffer-function 'display-buffer)
   (Kubernetes-Commands-display-buffer-select nil)))
#+END_SRC

** Multiple Cursors ([[https://github.com/magnars/multiple-cursors.el][link]])

Multiple cursors for Emacs. This is some pretty crazy functionality,
so yes, there are kinks. Don't be afraid tho, I've been using it since
2011 with great success and much merriment.

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this))
#+END_SRC

** Org

*** org-mode ([[https://orgmode.org/][link]])

Org mode is for keeping notes, maintaining TODO lists, planning
projects, and authoring documents with a fast and effective plain-text
syste.

#+BEGIN_SRC emacs-lisp
(defmacro org-babel-add-langs (langs)
  `(org-babel-do-load-languages
    'org-babel-load-languages
    (append org-babel-load-languages
            ',langs)))

(defun alist-unique (alist)
  (reduce (lambda (output value)
            (let* ((key (car value))
                   (existing-value (alist-get key output)))
              (cond ((not output) (list value))
                    ((not existing-value) (append output (list value)))
                    (t output))))
          alist :initial-value nil))

(defun append-alist-unique (values alist)
  "Add unique VALUE to ALIST when car of VALUE is unique, returns ALIST otherwise"
  (alist-unique (append alist values)))

(use-package org
  :hook
  (org-mode . turn-on-auto-fill)
  (org-src-mode . (lambda ()
                    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc))))
  :bind
  ("C-c l" . org-store-link)
  ("C-c a" . org-agenda)
  ("C-c c" . org-capture)

  :config
  (org-babel-add-langs ((emacs-lisp .  t)))
  (org-indent-mode 1)
  (custom-set-faces '(org-ellipsis ((t (:foreground "gray40" :underline nil)))))
  (org-babel-add-langs
   ((ditaa . t)))
  :custom
  (org-modules
   '(org-protocol
     org-habit
     org-mouse
     org-tempo
     org-notify
     org-mac-link
     org-mac-iCal
     org-panel))
  (org-blank-before-new-entry
   '((heading . t)
     (plain-list-item . nil)))
  (org-confirm-babel-evaluate
   (lambda (lang body)
     (not (string= lang "restclient"))))
  (org-hide-leading-stars t)
  (org-src-tab-acts-natively t)
  (org-startup-indented t)
  (org-startup-folded "content")
  (org-startup-with-inline-images t)
  (org-babel-min-lines-for-block-output 1)
  (org-speed-command-help t)
  (org-src-preserve-indentation t)
  (org-ellipsis " … " )
  (org-pretty-entities t)
  (org-hide-emphasis-markers t)
  (org-agenda-block-separator "")
  (org-fontify-whole-heading-line nil)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-tags-column 0)
  (org-indent-indentation-per-level 0)
  (org-directory "~/Dropbox/org")
  (org-default-notes-file "notes.org")
  (org-refile-targets '((org-agenda-files :maxlevel . 1)))
  (org-refile-allow-creating-parent-nodes 'confirm)
  (org-capture-templates
   '(("a" "Appointment" entry (file  "gcal.org" )
      "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
     ("l" "Link" entry (file+headline "links.org" "Links")
      "* %? %^L %^g \n%T" :prepend t)
     ("b" "Blog idea" entry (file+headline "todo.org" "Blog Topics:")
      "* %?\n%T" :prepend t)
     ("t" "Todo Item" entry
      (file+headline "todo.org" "Todo")
      "* TODO %?\n:PROPERTIES:\n:CREATED: %u\n:END:" :prepend t :empty-lines 1)
     ("n" "Note" entry (file+headline "todo.org" "Note space")
      "* %?\n%u" :prepend t)
     ("j" "Journal" entry (file+olp+datetree "journal.org")
      "* %?\nEntered on %U\n  %i\n  %a")
     )))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-habit
  :ensure nil)

(use-package org-starless
  :hook (org-mode . org-starless-mode)
  :quelpa (org-starless :fetcher github :repo "TonCherAmi/org-starless"))

(use-package org-tree-slide
  :custom
  (org-tree-slide-skip-outline-level 4)
  (org-tree-slide-skip-done nil)
  :config
  (global-set-key (kbd "<f8>") 'org-tree-slide-mode)
  (global-set-key (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)
  (define-key org-tree-slide-mode-map (kbd "<f9>")
    'org-tree-slide-move-previous-tree)
  (define-key org-tree-slide-mode-map (kbd "<f10>")
    'org-tree-slide-move-next-tree)
  (define-key org-tree-slide-mode-map (kbd "<f11>")
    'org-tree-slide-content)
  (org-tree-slide-narrowing-control-profile))

;; (use-package org-bullets
;;   :hook (org-mode . org-bullets-mode))

;; org-babel
(org-babel-add-langs
 ((emacs-lisp . t)
  (shell . t)))

(use-package ob-restclient
  :custom
  (org-babel-default-header-args:restclient
   '((:results . "raw")
     (:async . "yes")))
  :config
  (org-babel-add-langs
   ((restclient . t))))

(use-package ob-js
  :ensure nil
  :config
  (org-babel-add-langs
   ((js . t)))

  (add-to-list 'org-babel-tangle-lang-exts '("js" . "js")))

(use-package ob-deno
  :config
  (org-babel-add-langs
   ((deno . t))))

(use-package ob-async)

(use-package org-super-agenda
  :init
  :custom
  (org-super-agenda-groups
   ;; Each group has an implicit boolean OR operator between its selectors.
   '((:name "Today"        ; Optionally specify section name
            :time-grid t   ; Items that appear on the time grid
            :todo "TODAY") ; Items that have this TODO keyword
     (:name "Important"
            ;; Single arguments given alone
            :tag "bills"
            :priority "A")
     ;; Set order of multiple groups at once
     (:order-multi (2 (:name "Shopping in town"
                             ;; Boolean AND group matches items that match all subgroups
                             :and (:tag "shopping" :tag "@town"))
                      (:name "Food-related"
                             ;; Multiple args given in list with implicit OR
                             :tag ("food" "dinner"))
                      (:name "Personal"
                             :habit t
                             :tag "personal")
                      (:name "Space-related (non-moon-or-planet-related)"
                             ;; Regexps match case-insensitively on the entire entry
                             :and (:regexp ("space" "NASA")
                                           ;; Boolean NOT also has implicit OR between selectors
                                           :not (:regexp "moon" :tag "planet")))))
     ;; Groups supply their own section names when none are given
     (:todo "WAITING" :order 8)  ; Set order of this section
     (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
            ;; Show this group at the end of the agenda (since it has the
            ;; highest number). If you specified this group last, items
            ;; with these todo keywords that e.g. have priority A would be
            ;; displayed in that group instead, because items are grouped
            ;; out in the order the groups are listed.
            :order 9)
     (:priority<= "B"
                  ;; Show this section after "Today" and "Important", because
                  ;; their order is unspecified, defaulting to 0. Sections
                  ;; are displayed lowest-number-first.
                  :order 1)
     ;; After the last group, the agenda will display items that didn't
     ;; match any of these groups, with the default order position of 99
     ))
  (org-super-agenda-mode))

(defun make-orgcapture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "remember") (width . 80) (height . 16)
                (top . 400) (left . 300)
                (font . "-apple-Monaco-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1")
                ))
  (select-frame-by-name "remember")
  (org-capture)
  (delete-other-windows))

(use-package yequake
  :custom
  (yequake-frames
   '(("org-capture"
      (buffer-fns . (yequake-org-capture))
      (width . 0.75)
      (height . 0.5)
      (alpha . 0.95)
      (frame-parameters . ((undecorated . t)
                           (skip-taskbar . t)
                           (sticky . t)))))))
#+END_SRC

*** Org Roam

#+begin_src emacs-lisp
(defun org-roam-node-insert-immediate (arg &rest args)
  "This will allow you to quickly create new notes for topics
you're mentioning while writing so that you can go back later and
fill those notes in with more details!"
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

(defun my/org-roam-filter-by-tag (tag-name)
  "returns a filter function for "
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  "Returns list of noted with given filetag"
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun my/org-roam-refresh-agenda-list ()
  "Refreshes the agenda list adding Project notes to the list"
  (interactive)
  (setq org-agenda-files
        (append org-agenda-files
                (my/org-roam-list-notes-by-tag "Project")
                (my/org-roam-list-notes-by-tag "Plant"))))

(defun my/org-roam-template-dir-expand (file)
  (expand-file-name (concat user-emacs-directory file)))

(use-package org-roam
  :custom
  (org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-directory "~/Dropbox/OrgRoam")
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ("C-c n I" . org-roam-node-insert-immediate)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today)

         :map org-mode-map
         ("C-M-i"    . completion-at-point)

         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))

  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :custom-face
  (org-roam-link ((t (:foreground "#e24888" :underline t))))
  (org-roam-link-current ((t (:foreground "#e24888" :underline t))))
  :config
  (org-roam-setup)
  (require 'org-roam-dailies)
  (org-roam-db-autosync-mode)
  (my/org-roam-refresh-agenda-list)
  (setq org-roam-capture-templates
        `(("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
           :unnarrowed t)
          ("e" "elisp" plain
           (file ,(my/org-roam-template-dir-expand "etc/org-roam/templates/elisp.org"))
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+category: ${title}\n#+filetags: elisp\n")
           :unnarrowed t)
          ("p" "project" plain
           (file ,(my/org-roam-template-dir-expand "etc/org-roam/templates/project.org"))
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+category: ${title}\n#+filetags: Project\n")
           :unnarrowed t)
          ("r" "proposal" plain
           (file ,(my/org-roam-template-dir-expand "etc/org-roam/templates/proposal.org"))
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+category: ${title}\n#+filetags: Proposal\n")
           :unnarrowed t)
          ("f" "food" plain
           (file ,(my/org-roam-template-dir-expand "etc/org-roam/templates/food.org"))
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+category: ${title}\n#+filetags: Food\n")
           :unnarrowed t)
          ("t" "plant" plain
           (file ,(my/org-roam-template-dir-expand "etc/org-roam/templates/plant.org"))
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+category: ${title}\n#+filetags: Plant\n")
           :unnarrowed t))))
#+end_src

*** Htmlize for org-mode

#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC

*** org-cliplink ([[https://github.com/rexim/org-cliplink][link]])

#+begin_src emacs-lisp
(use-package org-cliplink
  :bind ("C-x p i" . org-cliplink))
#+end_src

*** org-roam-ui

#+begin_src emacs-lisp
(use-package org-roam-ui
  :quelpa (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

** COMMENT Mini frame

#+BEGIN_SRC emacs-lisp
(use-package mini-frame
  :init
  (defvar mini-frame-ignore-commands nil)
  :custom
  (mini-frame-detach-on-hide nil)
  (mini-frame-standalone 't)
  (mini-frame-resize-min-height 10)
  (mini-frame-show-parameters
   '((top . 0.5)
     (width . 0.5)
     (left . 0.5)))
  (mini-frame-ignore-commands '(evil-window-split
                                evil-window-vsplit
                                evil-ex))
  :config
  (mini-frame-mode +1))
#+END_SRC

** Load theme

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-molokai t)
  (doom-themes-org-config)
  (doom-themes-visual-bell-config)
  (doom-themes-neotree-config))
#+END_SRC

** Key suffixes popup

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
  (which-key-mode)
  :config
  (add-to-list 'which-key-replacement-alist '(("TAB" . nil) . ("↹" . nil)))
  (add-to-list 'which-key-replacement-alist '(("RET" . nil) . ("⏎" . nil)))
  (add-to-list 'which-key-replacement-alist '(("DEL" . nil) . ("⇤" . nil)))
  (add-to-list 'which-key-replacement-alist '(("SPC" . nil) . ("␣" . nil)))
  :custom
  ((which-key-sort-order #'which-key-prefix-then-key-order)
   (which-key-add-column-padding 1)
   (which-key-min-display-lines 6)
   (which-key-side-window-location 'bottom)
   (which-key-side-window-max-height 0.25)
   (which-key-side-window-max-width 0.33)
   (which-key-popup-type 'side-window)
   (which-key-sort-uppercase-first nil)))
#+END_SRC

** Editing forms in chrome

#+BEGIN_SRC emacs-lisp
(use-package atomic-chrome
  :config
  (atomic-chrome-start-server))
#+END_SRC

** Better help dialogs

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind (("C-h f"  . helpful-callable)
         ("C-h v"  . helpful-variable)
         ("C-h k"  . helpful-key)
         ("C-c C-d" . helpful-at-point)
         ("C-h k"  . helpful-key)))
#+END_SRC

** Better list-package mode

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :custom
  (paradox-github-token t)
  :config
  (paradox-enable))
#+END_SRC

** pnpm-mode

#+begin_src emacs-lisp
(use-package pnpm-mode
  :custom
  (pnpm-mode-command-prefix "C-c s-n"))
#+end_src

** Cycling between different var notations

#+BEGIN_SRC emacs-lisp
(use-package string-inflection
  :bind
  ("C-c C-u" . string-inflection-all-cycle))
#+END_SRC

** Open dash at point

#+BEGIN_SRC emacs-lisp
(use-package dash-at-point
  :bind
  ("C-c d" . dash-at-point)
  ("C-c e" . dash-at-point-with-docset))
#+END_SRC

** Move lines using alt + arrows

#+BEGIN_SRC emacs-lisp
(use-package move-text
  :config
  (move-text-default-bindings))
#+END_SRC

** Anzu - current match / all matches in modeline

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :init
  (global-anzu-mode +1)
  :bind
  ("M-%" . anzu-query-replace)
  ("C-M-%" . anzu-query-replace-regexp))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :after all-the-icons
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-minor-modes nil)
  (doom-modeline-checker-simple-format t))
#+END_SRC

** Git
*** magit - best git client ever

#+BEGIN_SRC emacs-lisp
(use-package magit
  :init
  :bind ("C-x g" . magit-status)
  :hook
  (git-commit-mode . flyspell-mode)
  :custom

  (vc-handled-backends nil)
  (magit-process-finish-apply-ansi-colors t)
  (magit-refresh-status-buffer t)
  (magit-blame-goto-chunk-hook '(magit-blame-maybe-show-message))

  :config
  (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)
  (add-hook 'magit-process-find-password-functions
            'magit-process-password-auth-source)

  (transient-define-suffix magit-submodule-update-all ()
    "Update all submodules"
    :description "Update All (git submodule update --init --recursive)"
    (interactive)
    (magit-with-toplevel
      (magit-run-git-async "submodule" "update" "--init" "--recursive"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package forge
  :after magit
  :config
  (add-to-list 'forge-alist '("gitlab.services.ams.osa" "gitlab.services.ams.osa/api/v4" "gitlab.services.ams.osa" forge-gitlab-repository)))
#+END_SRC

*** magit-delta

#+begin_src emacs-lisp
(use-package magit-delta
  :config)
#+end_src

*** magit-todos ([[https://github.com/alphapapa/magit-todos][link]])

#+begin_src emacs-lisp
(use-package magit-todos
  :after (magit)
  :config
  (magit-todos-mode 1))
#+end_src

*** Conventional Commit

#+begin_src emacs-lisp
(use-package conventional-commit
  :quelpa (conventional-commit :fetcher github :repo "akirak/conventional-commit.el")
  :hook
  (git-commit-mode . conventional-commit-setup))
#+end_src

*** browse-at-remote (link)

#+begin_src emacs-lisp
(use-package browse-at-remote
  :bind ("C-c C-g" . browse-at-remote)
  :custom
  (browse-at-remote-remote-type-regexps 
   '(("^gitlab\\.services\\.ams\\.osa$" . "gitlab")
     ("^github\\.com$" . "github")
     ("^bitbucket\\.org$" . "bitbucket")
     ("^gitlab\\.com$" . "gitlab")
     ("^gist\\.github\\.com$" . "gist"))))
#+end_src

** docker

#+begin_src emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+end_src

** git-gutter

#+begin_src emacs-lisp
(use-package git-gutter
  :hook (text-mode . git-gutter-mode)
  :config
  (setq git-gutter:update-interval 1))

(use-package git-gutter-fringe
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

** hl-todo-mode ([[https://github.com/tarsius/hl-todo][link]])

#+begin_src emacs-lisp
(use-package hl-todo
  :config
  :hook (prog-mode . hl-todo-mode))
#+end_src

** goto-line-preview

#+BEGIN_SRC emacs-lisp
(use-package goto-line-preview
  :bind ([remap goto-line] . goto-line-preview)
  :config)
#+END_SRC

** unfill

#+BEGIN_SRC emacs-lisp
(use-package unfill
  :bind ([remap fill-paragraph] . unfill-toggle))
#+END_SRC

** Snippets

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :hook (prog-mode . yas-minor-mode))

(use-package yasnippet-snippets
  :after yasnippet
  :config
  (yas-reload-all))
#+END_SRC

** keyfreq

#+BEGIN_SRC emacs-lisp
(use-package keyfreq
  :custom
  (keyfreq-excluded-commands
   (list ignore
         mwheel-scroll
         self-insert-command
         forward-char
         left-char
         right-char
         backward-char
         previous-line
         next-line))
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
#+END_SRC

** rg

ripgrep frontend

#+BEGIN_SRC emacs-lisp
(use-package rg
  :ensure-system-package rg
  :custom
  (rg-custom-type-aliases
   '(("svelte" .    "*.svelte")
     ("ts" .    "*.tsx?")
     ("env" .    "\.env.*")))
  :config
  (rg-enable-menu))
#+END_SRC

** Dired

I've tried ~[[https://github.com/ralesi/ranger.el][ranger-mode~]] with it's simplier ~[[https://github.com/ralesi/ranger.el#minimal-ranger-mode-deer][deer-mode~]] and I must say, nothing beets good old [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Dired]].

With some additions of course, like [[https://github.com/purcell/diredfl][~diredfl~]] for colors and [[https://gitlab.com/xuhdev/dired-quick-sort][~dired-quick-sort~]] for better sorting with native ~gnu ls~

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :custom
  (dired-dwim-target t)
  :config
  (cond ((string-equal system-type "darwin")
         (setq insert-directory-program "gls"
               dired-use-ls-dired t)
         (setq dired-listing-switches "-agho --group-directories-first"))))

(use-package diredfl
  :after dired
  :init
  (diredfl-global-mode 1))

(use-package dired-quick-sort
  :after dired
  :custom
  (ls-lisp-use-insert-directory-program t)
  :config
  (dired-quick-sort-setup))

(use-package dired-subtree
  :after dired
  :bind (:map dired-mode-map
              ("TAB" . dired-subtree-toggle)))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :custom
  (flycheck-idle-change-delay 1)
  :custom-face
  (flycheck-error ((t (:underline (:color "#e74c3c" :style wave) :background unspecified))))
  (flycheck-info ((t (:underline (:color "#b6e63e" :style wave) :background unspecified))))
  :config
  (global-flycheck-mode 1))
#+END_SRC

** restclient

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :defer t
  :mode (("\\.http\\'" . restclient-mode))
  :bind (:map restclient-mode-map
              ("C-c C-f" . json-mode-beautify)))
#+END_SRC

** jq

#+BEGIN_SRC emacs-lisp
(use-package jq-mode
  :after (org-mode json-mode)
  :commands (jq-mode jq-interactively)
  :mode ("\\.jq$" . js-mode)
  :bind (:map json-mode-map
              ("C-c C-j" . jq-interactively))
  :config
  (org-babel-add-langs
   ((jq . t))))
#+END_SRC

** LSP Mode

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . lsp-enable-which-key-integration)
  :custom
  (lsp-completion-provider :none)
  (lsp-auto-guess-root t)
  (lsp-keymap-prefix "C-c l")
  (lsp-enable-indentation nil)
  (lsp-enable-on-type-formatting nil)
  (lsp-clients-typescript-init-opts
   '(:includeCompletionsForModuleExports nil :generateReturnInDocTemplate t))
  (lsp-yaml-schema-store-local-db
   (no-littering-expand-var-file-name "./lsp/lsp-yaml-schemas.json"))
  :config
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]chromium/src\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]src/node_modules\\'"))

(use-package lsp-ui
  :after lsp-mode
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-show-hover nil)
  (lsp-ui-doc-position 'at-point))

(use-package lsp-tailwindcss
  :custom
  (lsp-tailwindcss-add-on-mode t))
#+END_SRC

** DAP Mode

Run ~dap-chrome-setup~ after requiring ~dab-chrome~

#+begin_src emacs-lisp
(use-package dap-mode
  :commands (dap-mode)
  :config
  (require 'dap-chrome)
  (dap-ui-mode 1)
  (dap-tooltip-mode 1)
  (dap-ui-controls-mode 1)
  (dap-register-debug-template
   "Opera GX Corner [laungh]"
   (list :type "chrome"
         :name "Opera GX Corner [laungh]"
         :request "laungh"
         :url "https://local.op-test.net/"
         :runtimeExecutable "/Applications/Opera GX.app/Contents/MacOS/Opera"
         :webRoot "${workspaceFolder}/.dist/"
         :userDataDir t
         :sourceMaps t
         ))
  (dap-register-debug-template
   "Opera GX Corner [attach]"
   (list :type "chrome"
         :name "Opera GX Corner [attach]"
         :request "attach"
         :port 9222
         :url "https://local.op-test.net/"
         :webRoot "${workspaceFolder}/.dist/"
         :userDataDir t
         :sourceMaps t
         )))
#+end_src

** File types
*** .env

#+begin_src emacs-lisp
(use-package dotenv-mode
  :mode ("\\.env\\..*\\'" . dotenv-mode))
#+end_src

*** Elisp

#+begin_src emacs-lisp
(use-package elisp
  :ensure nil
  :mode ("\\.el\\'" . emacs-lisp-mode))
#+end_src

*** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)))

(use-package grip-mode
  :bind
  (:map markdown-mode-command-map
        ("g" . grip-mode))
  :config
  (let ((credential (auth-source-user-and-password "github.com")))
    (setq grip-github-user (car credential)
          grip-github-password (cadr credential))))

(use-package edit-indirect
  :after markdown-mode)
#+END_SRC

*** Htmlize for org-mode

#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC

*** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\.yaml")
#+END_SRC

*** GO

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :mode "\\.go"
  :config
  (add-hook 'go-mode-hook
            (lambda ()
              (add-hook 'before-save-hook 'gofmt-before-save)
              (local-set-key (kbd "M-.") 'godef-jump))))
#+END_SRC

*** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.json$"
  :interpreter "json"
  :config
  (setq js-indent-level 2))

#+END_SRC

*** CSS

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :mode "\\.css")
#+END_SRC

*** SCSS

#+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :mode "\\.scss"
  :hook (scss-mode . lsp-deferred))
#+END_SRC

*** LUA

#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :mode ("\\.lua"))
#+END_SRC

*** JS

#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :after lsp-mode
  :mode ("\\.ts$")
  :custom
  (typescript-indent-level 2)
  :hook
  (typescript-mode . lsp-deferred))

(use-package js2-mode
  :mode ("\\.[cm]*js$")
  :hook (js2-mode . lsp-deferred))

(use-package eslintd-fix
  :hook (js2-mode . eslintd-fix-mode))

(use-package apheleia
  :config
  (apheleia-global-mode +1))

(use-package web-mode
  :mode
  ("\\.html\\'"
   "\\.tsx\\'"
   "\\.svelte\\'")
  :hook
  (web-mode . lsp-deferred)
  :custom
  (web-mode-content-types-alist
   '(("jsx" . "\\.tsx\\'")
     ("jsx" . "\\.jsx\\'")
     ("svelte" . "\\.svelte\\'")
     ("html" . "\\.html\\'")))
  (web-mode-enable-auto-indentation nil)
  (web-mode-indentation-params
   '(("lineup-args" . t)
     ("lineup-calls" . t)
     ("lineup-concats" . t)
     ("lineup-quotes" . t)
     ("lineup-ternary" . nil)
     ("case-extra-offset" . t))))
#+END_SRC

*** Py

#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :mode "\\.py"
  :interpreter "py"
  :config
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt"))
#+END_SRC

*** Dockerfile and docker-compose.yml

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile$")

(use-package docker-compose-mode
  :mode "docker-compose.yml.py$")
#+end_src

* Other

#+BEGIN_SRC emacs-lisp
(message ".emacs loaded successfully.")

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
#+END_SRC
