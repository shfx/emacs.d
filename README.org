#+TITLE: ~.emacs.d~

* Synopsis

Emacs configuration files written with the help of [[https://orgmode.org/][org-mode]] and [[https://orgmode.org/worg/org-contrib/babel/][org-babel]]

* Install Emacs with ~homebrew~

#+BEGIN_SRC shell
  brew cask install emacs
#+END_SRC

Add this to file:~/Library/LaunchAgents/gnu.emacs.daemon.plist

#+BEGIN_SRC xml
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
  <plist version="1.0">
  <dict>
    <key>KeepAlive</key>
    <true/>
    <key>Label</key>
    <string>homebrew.mxcl.emacs</string>
    <key>ProgramArguments</key>
    <array>
      <string>/usr/local/opt/emacs/bin/emacs</string>
      <string>--fg-daemon</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
  </dict>
  </plist>
#+END_SRC

#+BEGIN_SRC shell
  launchctl load -w ~/Library/LaunchAgents/gnu.emacs.daemon.plist
#+END_SRC

Install emacs-anywhere https://github.com/zachcurry/emacs-anywhere

#+BEGIN_SRC shell
  curl -fsSL https://raw.github.com/zachcurry/emacs-anywhere/master/install | bash
#+END_SRC

* Initialiation defaults

** Setting default coding system

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)

  (prefer-coding-system 'utf-8)
#+END_SRC

** Setting default display and editing options

#+BEGIN_SRC emacs-lisp
  (set-default 'truncate-lines t)
  (global-hl-line-mode 0)
  (set-window-margins nil 0 0)
  (electric-pair-mode 1)
  (line-number-mode 0)
  (column-number-mode 1)
  (global-linum-mode 0)
  (desktop-save-mode 1)
  (savehist-mode 1)
  (delete-selection-mode 1)
  (global-auto-revert-mode 1)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)

  (setq
   desktop-save t
   desktop-dirname "~/.emacs.d/desktop/"
   desktop-base-file-name "emacs.desktop"
   desktop-base-lock-name "lock"
   desktop-path (list desktop-dirname)
   desktop-files-not-to-save "^$" ;reload tramp paths
   desktop-load-locked-desktop nil
   desktop-auto-save-timeout 30
   inhibit-splash-screen t
   inhibit-startup-message t
   pop-up-frames nil
   visible-bell 'top-bottom
   ring-bell-function 'ignore
   transient-mark-mode t
   show-paren-mode 1
   make-backup-files nil
   auto-save-default nil
   vc-handled-backends nil
   ns-use-proxy-icon nil
   frame-title-format "Emacs"
   auto-save-visited-file-name t
   ns-right-alternate-modifier nil)

  (fset 'yes-or-no-p 'y-or-n-p)

  (global-unset-key (kbd "C-x C-c"))
  (global-unset-key (kbd "s-w"))
  (windmove-default-keybindings 'super)
  (winner-mode 1)

  ;; font sizes
  (global-set-key (kbd "s-=")
                  (lambda ()
                    (interactive)
                    (let ((old-face-attribute (face-attribute 'default :height)))
                      (set-face-attribute 'default nil :height (+ old-face-attribute 10)))))

  (global-set-key (kbd "s--")
                  (lambda ()
                    (interactive)
                    (let ((old-face-attribute (face-attribute 'default :height)))
                      (set-face-attribute 'default nil :height (- old-face-attribute 10)))))

  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
#+END_SRC

** Auto minor-mode for use-package

#+BEGIN_SRC emacs-lisp
  (use-package auto-minor-mode)
#+END_SRC

** Ensure system-package
#+BEGIN_SRC emacs-lisp
  (use-package system-packages)
  (use-package use-package-ensure-system-package)

  (defun string/ends-with (string suffix)
    "Return t if STRING ends with SUFFIX."
    (and (string-match (rx-to-string `(: ,suffix eos) t) string) t))
#+END_SRC

** Default trash behavior

#+BEGIN_SRC emacs-lisp
  (use-package osx-trash
    :if (eq system-type 'darwin)
    :init
    (osx-trash-setup)
    :config
    (setq delete-by-moving-to-trash t))
#+END_SRC

** COMMENT Setting title format

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
    '("Emacs - " (buffer-file-name "%f"
    '(dired-directory dired-directory "%b"))))
#+END_SRC

** System specyfic defaults

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (defvar ls-lisp-use-insert-directory-program)
    (defvar powerline-image-apple-rgb)
    (setq ns-use-srgb-colorspace t)
    (setq powerline-image-apple-rgb t)
    (require 'ls-lisp)
    (setq ls-lisp-use-insert-directory-program nil))
#+END_SRC

** Disabling suspend-frame binding

Very annoying binding, lets get rid of it.

#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
#+END_SRC

* Packages

** Eshell ([[https://masteringemacs.org/article/complete-guide-mastering-eshell][link]])

*Eshell* is a shell written entirely in Emacs-Lisp, and it replicates
most of the features and commands from GNU CoreUtils and the
Bourne-like shells. So by re-writing common commands like ls and cp in
Emacs-Lisp, Eshell will function identically on any environment Emacs
itself runs on.

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :after eshell-toggle
    :bind (:map eshell-mode-map
                ([remap eshell-pcomplete] . helm-esh-pcomplete)
                ("M-r" . helm-eshell-history)
                ("M-s f" . helm-eshell-prompts-all))
    :hook ((eshell-mode . (lambda ()
                            (eshell/alias "e" "find-file $1")
                            (eshell/alias "ff" "find-file $1")
                            (eshell/alias "emacs" "find-file $1")
                            (eshell/alias "ee" "find-file-other-window $1")

                            (eshell/alias "gd" "magit-diff-unstaged")
                            (eshell/alias "gds" "magit-diff-staged")
                            (eshell/alias "d" "dired $1"))))
    :custom
    (helm-show-completion-display-function #'helm-show-completion-default-display-function)
    (eshell-banner-message "")
    (eshell-scroll-to-bottom-on-input t)
    :config
    (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
    (defun eshell/clear ()
      "Clear the eshell buffer."
      (let ((inhibit-read-only t))
        (erase-buffer)
        (eshell-send-input))))

  (use-package esh-autosuggest
    :after eshell
    :hook (eshell-mode . esh-autosuggest-mode))

  (use-package xterm-color
    :after eshell-toggle
    :custom
    (comint-output-filter-functions
     (remove 'ansi-color-process-output comint-output-filter-functions))
    (eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
    :hook
    (eshell-before-prompt .
                          (lambda ()
                            (setq xterm-color-preserve-properties t)))
    :config
    (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
    (setenv "TERM" "xterm-256color"))

  (use-package eshell-up
    :after eshell)

  (use-package shrink-path
    :after eshell
    :custom
    ((eshell-prompt-regexp "^.*❯ ")
     (eshell-prompt-function
      (lambda nil
        (let ((base/dir (shrink-path-prompt default-directory)))
          (concat (propertize (car base/dir)
                              'face 'font-lock-comment-face)
                  (propertize (cdr base/dir)
                              'face 'font-lock-constant-face)
                  ;; (propertize (+eshell--current-git-branch)
                  ;;             'face 'font-lock-function-name-face)
                  (propertize " ❯" 'face 'eshell-prompt-face)
                  ;; needed for the input text to not have prompt face
                  (propertize " " 'face 'default)))))))
#+END_SRC

** Eshell Toggle ([[https://github.com/4DA/eshell-toggle][link]])

Simple functionality to show/hide eshell/ansi-term (or almost any
other buffer, see eshell-toggle-init-function description below) at
the bottom of active window with directory of its buffer.

#+BEGIN_SRC emacs-lisp
  (use-package eshell-toggle
    :after eshell
    :bind
    ("s-`" . eshell-toggle)
    :custom
    (eshell-toggle-name-separator " ❯ ")
    (eshell-toggle-size-fraction 3)
    (eshell-toggle-use-projectile-root t))
#+END_SRC

** vterm

#+BEGIN_SRC emacs-lisp
  (use-package vterm)
#+END_SRC

** Shackle ([[https://github.com/wasamasa/shackle][link]])

*Shackle* gives you the means to put an end to popped up buffers not
behaving they way you'd like them to. By setting up simple rules you
can for instance make Emacs always select help buffers for you or make
everything reuse your currently selected window.

#+BEGIN_SRC emacs-lisp
  (use-package shackle
    :custom
    ((shackle-rules
      '(("*helm-ag*"              :select t   :align right :size 0.5)
        ("*helm semantic/imenu*"  :select t   :align right :size 0.4)
        ("*helm org inbuffer*"    :select t   :align right :size 0.4)
        ("*eshell*"               :select t   :inhibit-window-quit t :other t)
        (magit-status-mode        :select t   :inhibit-window-quit t :align right)
        (magit-log-mode           :select t   :inhibit-window-quit t: :same t)
        (flycheck-error-list-mode :select nil :align below :size 0.25)
        (compilation-mode         :select nil :align below :size 0.25)
        (messages-buffer-mode     :select t   :align below :size 0.25)
        (inferior-emacs-lisp-mode :select t   :align below :size 0.25)
        (calendar-mode            :select t   :align below :size 0.25)
        (help-mode                :select t   :align right :size 0.5)
        (helpful-mode             :select t   :align right :size 0.5)
        (" *Deletions*"           :select t   :align below :size 0.25)
        (" *Marked Files*"        :select t   :align below :size 0.25)
        ("*Org Select*"           :select t   :align below :size 0.33)
        ("*Org Note*"             :select t   :align below :size 0.33)
        ("*Org Links*"            :select t   :align below :size 0.2)
        (" *Org todo*"            :select t   :align below :size 0.2)
        ("*Man.*"                 :select t   :align below :size 0.5  :regexp t)
        ("*helm.*"                :select t   :align below :size 0.33 :regexp t)
        ("*Org Src.*"             :select t   :align right :size 0.5  :regexp t))))
    :config
    (shackle-mode t))
#+END_SRC

** Editor Config ([[https://github.com/editorconfig/editorconfig-emacs][link]])

*EditorConfig* helps maintain consistent coding styles for multiple
developers working on the same project across various editors and
IDEs. The EditorConfig project consists of a file format for defining
coding styles and a collection of text editor plugins that enable
editors to read the file format and adhere to defined
styles. EditorConfig files are easily readable and they work nicely
with version control systems.

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :init
    (editorconfig-mode 1))
#+END_SRC

** Dimmer ([[https://github.com/gonewest818/dimmer.el][link]])

This module provides a minor mode that indicates which buffer is
currently active by dimming the faces in the other buffers.

#+BEGIN_SRC emacs-lisp
    (use-package dimmer
      :custom
      ((dimmer-fraction 0.35)
       (dimmer-exclusion-predicates '(helm--alive-p window-minibuffer-p))
       (dimmer-exclusion-regexp-list
        '("^\\*[h|H]elm.*\\*" "^\\*Minibuf-[0-9]+\\*"
          "^.\\*which-key\\*$" "^*Messages*" "*LV*")))
      :config
      (dimmer-mode))
#+END_SRC

** Posframe

#+BEGIN_SRC emacs-lisp
  (use-package posframe
    :ensure t)
#+END_SRC

** Expand region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+END_SRC

** Restart Emacs

#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs)
#+END_SRC

** Auto minor-mode

#+BEGIN_SRC emacs-lisp
  (use-package auto-minor-mode)
#+END_SRC

** Eyebrowser

#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :init
    (eyebrowse-mode t))
#+END_SRC

** All the icons ([[https://github.com/domtronn/all-the-icons.el][link]])

A utility package to collect various Icon Fonts and propertize them
within Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :custom
    (inhibit-compacting-font-caches t))
#+END_SRC

** Projectile ([[https://github.com/bbatsov/projectile][link]])

Projectile is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without
introducing external dependencies (when feasible)

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :custom
    ((projectile-enable-caching t)
     (ns-use-proxy-icon nil)
     (projectile-switch-project-action #'projectile-dired)
     (projectile-completion-system 'ivy))
    :init
    (projectile-mode))

#+END_SRC

** Dashboard

#+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :custom
      (
       (initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
       (dashboard-set-heading-icons t)
       (dashboard-set-file-icons t)
       (dashboard-banner-logo-title "Welcome to Emacs")
       (dashboard-items
        '((recents . 3)
          ;; (bookmarks . 5)
          (agenda . 5)
          (projects . 5)
          (registers . 5)))
       (dashboard-startup-banner 'logo)
       (dashboard-center-content t)
       (dashboard-show-shortcuts nil)
       (dashboard-navigator-buttons
        `((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
           "Homepage"
           "Browse homepage"
           (lambda (&rest _) (browse-url "homepage")))
          ("★" "Star" "Show stars" (lambda (&rest _) (show-stars)) 'warning)
          ("?" "Help" "?/h" #'show-help nil "<" ">"))))
      :config
      (dashboard-setup-startup-hook))

    (use-package page-break-lines)

    (use-package dashboard-hackernews)
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
    (helm-mode 1)

    :custom
    (helm-ff-lynx-style-map t)

    :bind (("M-x"     . helm-M-x)
           ("M-y"     . helm-show-kill-ring)
           ("C-x b"   . helm-mini)
           ("C-x C-f" . helm-find-files)
           ("C-c p"   . projectile-command-map)
           :map helm-map
           ("<left>" . helm-previous-source)
           ("<right>" . helm-next-source))

    :config
    (defvar helm-M-x-fuzzy-match)
    (defvar flycheck-mode-map)

    (setq helm-display-header-line nil
          helm-split-window-preferred-function 'ignore
          helm-M-x-fuzzy-match t)

    (eval-after-load 'flycheck
      '(define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck)))

  (use-package helm-projectile
    :after (helm)
    :bind
    ("<f5>" . helm-projectile)

    :config
    (helm-projectile-on))

  (use-package helm-flycheck
    :after (helm))

  (use-package helm-descbinds
    :after (helm)
    :init
    (helm-descbinds-mode))

  (use-package helm-org)
  (use-package helm-org-rifle)
#+END_SRC

** Ivy / Swiper

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t))

  (use-package swiper)

  (use-package ivy-posframe
    :custom
    ;; (ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
    ;; (ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
    (ivy-posframe-display-functions-alist
     '((swiper          . ivy-posframe-display)
       (complete-symbol . ivy-posframe-display)
       (counsel-M-x     . ivy-posframe-display)
       (t               . ivy-posframe-display)))
    :config
    (ivy-posframe-mode 1))
#+END_SRC

** Hydra

#+BEGIN_SRC emacs-lisp
  (use-package hydra)
  ()

  (use-package buffer-move)

  (defhydra hydra-window (:color pink :hint nil :timeout 20)
    "
           Move                    Resize                      Swap              Split
  ╭─────────────────────────────────────────────────────────────────────────────────────────┐
           ^_<up>_^                    ^_C-<up>_^                      ^_M-<up>_^            [_v_]ertical
            ^^▲^^                         ^^▲^^                           ^^▲^^              [_h_]orizontal
   _<left>_ ◀   ▶ _<right>_    _C-<left>_ ◀   ▶ _C-<right>_    _M-<left>_ ◀   ▶ _M-<right>_
            ^^▼^^                         ^^▼^^                           ^^▼^^              ╭──────────┐
          ^_<down>_^                  ^_C-<down>_^                    ^_M-<down>_^           quit : [_SPC_]
  "
    ("<left>" windmove-left)
    ("<down>" windmove-down)
    ("<up>" windmove-up)
    ("<right>" windmove-right)
    ("h" split-window-below)
    ("v" split-window-right)
    ("C-<up>" hydra-move-splitter-up)
    ("C-<down>" hydra-move-splitter-down)
    ("C-<left>" hydra-move-splitter-left)
    ("C-<right>" hydra-move-splitter-right)
    ("M-<up>" buf-move-up)
    ("M-<down>" buf-move-down)
    ("M-<left>" buf-move-left)
    ("M-<right>" buf-move-right)
    ("SPC" nil))
#+END_SRC

** Idium - JS debugging tool

#+BEGIN_SRC emacs-lisp
  (use-package indium)
#+END_SRC

** Multiple Cursors

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this))
#+END_SRC

** Mac Only - initialize emacs with proper PATH

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)
      (exec-path-from-shell-copy-env "GOPATH")))
#+END_SRC

** Load theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :init
    (load-theme 'doom-molokai t)
    :config
      (doom-themes-org-config)
      (doom-themes-visual-bell-config))

  (use-package solaire-mode
    :hook
    ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
    (minibuffer-setup . solaire-mode-in-minibuffer)
    :config
    (solaire-mode-swap-bg))
#+END_SRC

** Better defaults

#+BEGIN_SRC emacs-lisp
  (use-package better-defaults)
#+END_SRC

** Key suffixes popup

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :config
    (setq which-key-popup-type 'side-window
          which-key-side-window-location 'bottom
          which-key-side-window-max-width 0.33
          which-key-side-window-max-height 0.25))
#+END_SRC

** Editing forms in chrome

#+BEGIN_SRC emacs-lisp
  (use-package atomic-chrome)
#+END_SRC

** Better help dialogs

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind (("C-h f"  . helpful-callable)
           ("C-h v"  . helpful-variable)
           ("C-h k"  . helpful-key)))
#+END_SRC

** Better list-package mode

#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :config
    (paradox-enable))

#+END_SRC

** Cycling between different var notations

#+BEGIN_SRC emacs-lisp
  (use-package string-inflection
    :bind
    ("C-c C-u" . string-inflection-all-cycle))
#+END_SRC

** Open dash at point

#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point
    :bind
    ("C-c d" . dash-at-point)
    ("C-c e" . dash-at-point-with-docset))
#+END_SRC

** Move lines using alt + arrows

#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :config
    (move-text-default-bindings))
#+END_SRC

** Anzu - current match / all matches in modeline

#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :init
    (global-anzu-mode +1)
    :bind
    ("M-%" . anzu-query-replace)
    ("C-M-%" . anzu-query-replace-regexp))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :custom
    ((doom-modeline-icon t)
     (doom-modeline-major-mode-icon t)
     (doom-modeline-major-mode-color-icon t)
     (doom-modeline-buffer-state-icon t)
     (doom-modeline-buffer-modification-icon t)
     (doom-modeline-minor-modes nil)
     (doom-modeline-checker-simple-format t))
    :hook (after-init . doom-modeline-mode))
#+END_SRC

** Magit - best git client ever

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    :bind ("C-x g" . magit-status)
    :custom
    ((vc-handled-backends nil)
     (magit-process-finish-apply-ansi-colors t)
     (magit-refresh-status-buffer nil))
    :config
    (remove-hook 'magit-refs-sections-hook 'magit-insert-tags))
#+END_SRC

** Magithub
#+BEGIN_SRC emacs-lisp
  (use-package magithub
    :after magit
    :config
    (magithub-feature-autoinject t)
    (setq magithub-clone-default-directory "~/Projects"))
#+END_SRC

** diff-hl

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config
    (global-diff-hl-mode))
#+END_SRC

** goto-line-preview

#+BEGIN_SRC emacs-lisp
  (use-package goto-line-preview
    :bind ([remap goto-line] . goto-line-preview)
    :config)
#+END_SRC

** unfill

#+BEGIN_SRC emacs-lisp
  (use-package unfill
    :bind ([remap fill-paragraph] . unfill-toggle))
#+END_SRC

** Snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :hook ((prog-mode org-mode) . yas-minor-mode))

  (use-package yasnippet-snippets
    :after yasnippet
    :config
    (yas-reload-all))

  (use-package helm-c-yasnippet
    :after yasnippet)
#+END_SRC

** Auto completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (global-company-mode)
    :bind
    ("C-." . company-complete)
    ("C-c /" . 'company-files)
    :config
    (setq company-idle-delay 0.3
          company-tooltip-limit 15
          company-minimum-prefix-length 1
          company-tooltip-flip-when-above t
          company-tooltip-align-annotations t
          company-backends '()))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+END_SRC

** command-log

#+BEGIN_SRC emacs-lisp :hlines yes
  (use-package command-log-mode)
#+END_SRC

** Packages autoupdate

#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :custom
    ((auto-package-update-delete-old-versions t)
     (auto-package-update-hide-results t))
    :config
    (auto-package-update-maybe))
#+END_SRC

** Key statistics

#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :config
    (setq keyfreq-excluded-commands
          '(
            mwheel-scroll
            self-insert-command
            forward-char
            left-char
            right-char
            backward-char
            previous-line
            next-line))

    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC

** fast-scroll

#+BEGIN_SRC emacs-lisp
  (use-package fast-scroll
    :commands (fast-scroll-config fast-scroll-advice-scroll-functions)
    :load-path "elisp/fast-scroll"
    :config
    (fast-scroll-config)
    (fast-scroll-advice-scroll-functions))
#+END_SRC

** Fira Code
#+BEGIN_SRC emacs-lisp
  (use-package fira-code
    :commands (fira-code-mode)
    :load-path "elisp/fira-code"
    :hook
    (prog-mode . fira-code-mode))
#+END_SRC

** rg - ripgrep frontend

#+BEGIN_SRC emacs-lisp
  (use-package rg
    :ensure-system-package (rg)
    :config
    (rg-enable-default-bindings))
#+END_SRC

** linum-mode

#+BEGIN_SRC emacs-lisp
  (use-package linum-mode
    :ensure nil
    :hook
    (prog-mode . linum-mode))
#+END_SRC

** bang

#+BEGIN_SRC emacs-lisp
  (use-package bang
    :bind ("M-!" . bang))
#+END_SRC

** Prettier

#+BEGIN_SRC emacs-lisp
  (use-package prettier-js)
#+END_SRC

** Symbol Overlay

#+BEGIN_SRC emacs-lisp
  (use-package symbol-overlay
    :bind
    ("M-i" . symbol-overlay-put)
    ("M-n" . symbol-overlay-switch-forward)
    ("M-p" . symbol-overlay-switch-backward)
    ("<f7>" . symbol-overlay-mode)
    ("<f8>" . symbol-overlay-remove-all))
#+END_SRC

** Dired

I've tried ~[[https://github.com/ralesi/ranger.el][ranger-mode~]] with it's simplier ~[[https://github.com/ralesi/ranger.el#minimal-ranger-mode-deer][deer-mode~]] and I must say, nothing beets good old [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Dired]].

With some additions of course, like [[https://github.com/purcell/diredfl][~diredfl~]] for colors and [[https://gitlab.com/xuhdev/dired-quick-sort][~dired-quick-sort~]] for better sorting with native ~gnu ls~

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq insert-directory-program "/usr/local/opt/coreutils/libexec/gnubin/gls")
    (setq dired-listing-switches "-alXv"))

  (use-package diredfl
    :init
    (diredfl-global-mode 1))

  (use-package dired-quick-sort
    :custom
    ((ls-lisp-use-insert-directory-program t)
     (insert-directory-program "/usr/local/bin/gls"))
    :config
    (dired-quick-sort-setup))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :commands (flycheck-mode)
    :config
    (global-flycheck-mode))
#+END_SRC

** COMMENT Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :custom
    ((treemacs-collapse-dirs                 (if treemacs-python-executable 3 0))
     (treemacs-deferred-git-apply-delay      0.5)
     (treemacs-display-in-side-window        t)
     (treemacs-eldoc-display                 t)
     (treemacs-file-event-delay              5000)
     (treemacs-file-follow-delay             0.2)
     (treemacs-follow-after-init             t)
     (treemacs-git-command-pipe              "")
     (treemacs-goto-tag-strategy             'refetch-index)
     (treemacs-indentation                   2)
     (treemacs-indentation-string            " ")
     (treemacs-is-never-other-window         nil)
     (treemacs-max-git-entries               5000)
     (treemacs-missing-project-action        'ask)
     (treemacs-no-png-images                 nil)
     (treemacs-no-delete-other-windows       t)
     (treemacs-project-follow-cleanup        nil)
     (treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory))
     (treemacs-position                      'left)
     (treemacs-recenter-distance             0.1)
     (treemacs-recenter-after-file-follow    nil)
     (treemacs-recenter-after-tag-follow     nil)
     (treemacs-recenter-after-project-jump   'always)
     (treemacs-recenter-after-project-expand 'on-distance)
     (treemacs-show-cursor                   nil)
     (treemacs-show-hidden-files             t)
     (treemacs-silent-filewatch              nil)
     (treemacs-silent-refresh                nil)
     (treemacs-sorting                       'alphabetic-desc)
     (treemacs-space-between-root-nodes      t)
     (treemacs-tag-follow-cleanup            t)
     (treemacs-tag-follow-delay              1.5)
     (treemacs-width                         35))

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)
    :config
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile)

  (use-package treemacs-magit
    :after treemacs magit)
#+END_SRC

** File types

*** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode "\\.md")

  (use-package grip-mode)
#+END_SRC

*** Orgfiles

#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook
    ((org-mode . org-sticky-header-mode)
     (org-mode . toc-org-enable))

    :bind
    (("C-c l" . org-store-link)
     ("C-c a" . org-agenda)
     ("C-c c" . org-capture))
    :config
    (print "Org-mode loaded")
    :custom
    ((org-startup-indented t)
     (org-tags-column  0)
     (org-ellipsis " ...")
     (org-startup-indented t)
     (org-indent-indentation-per-level 1)
     (org-default-notes-file (concat org-directory "/notes.org"))
     (org-refile-targets '((org-agenda-files :maxlevel . 1)))
     (org-refile-allow-creating-parent-nodes 'confirm)
     (org-agenda-files (list "~/.orgfiles/Inbox.org"
                             "~/.orgfiles/links.org"
                             "~/.orgfiles/todo.org"
                             "~/.orgfiles/journal.org"))
     (org-capture-templates '(("a" "Appointment" entry (file  "~/Dropbox/Orgfiles/gcal.org" )
                               "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
                              ("l" "Link" entry (file+headline "~/Dropbox/Orgfiles/links.org" "Links")
                               "* %? %^L %^g \n%T" :prepend t)
                              ("b" "Blog idea" entry (file+headline "~/Dropbox/Orgfiles/todo.org" "Blog Topics:")
                               "* %?\n%T" :prepend t)
                              ("t" "Todo Item" entry
                               (file+headline "~/Dropbox/Orgfiles/todo.org" "Todo")
                               "* TODO %?\n:PROPERTIES:\n:CREATED: %u\n:END:" :prepend t :empty-lines 1)
                              ("n" "Note" entry (file+headline "~/Dropbox/Orgfiles/todo.org" "Note space")
                               "* %?\n%u" :prepend t)
                              ("j" "Journal" entry (file+datetree "~/Dropbox/Orgfiles/journal.org")
                               "* %?\nEntered on %U\n  %i\n  %a")
                              ("s" "Screencast" entry (file "~/Dropbox/Orgfiles/screencastnotes.org")
                               "* %?\n%i\n"))))
    :init
    (print "Org-mode loaded"))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package org-sticky-header
    :config
    (setq-default
     org-sticky-header-full-path 'full
     org-sticky-header-outline-path-separator " / "))

  (use-package org-bullets
    :hook (org-mode . (lambda () (org-bullets-mode 1))))

  (use-package toc-org
    :after org)

  (use-package ob-restclient
    :config
    (org-babel-do-load-languages
       'org-babel-load-languages
       '((restclient . t))))

  (use-package org-super-agenda
    :init
    :custom
    (org-super-agenda-groups
     ;; Each group has an implicit boolean OR operator between its selectors.
     '((:name "Today"        ; Optionally specify section name
              :time-grid t   ; Items that appear on the time grid
              :todo "TODAY") ; Items that have this TODO keyword
       (:name "Important"
              ;; Single arguments given alone
              :tag "bills"
              :priority "A")
       ;; Set order of multiple groups at once
       (:order-multi (2 (:name "Shopping in town"
                               ;; Boolean AND group matches items that match all subgroups
                               :and (:tag "shopping" :tag "@town"))
                        (:name "Food-related"
                               ;; Multiple args given in list with implicit OR
                               :tag ("food" "dinner"))
                        (:name "Personal"
                               :habit t
                               :tag "personal")
                        (:name "Space-related (non-moon-or-planet-related)"
                               ;; Regexps match case-insensitively on the entire entry
                               :and (:regexp ("space" "NASA")
                                             ;; Boolean NOT also has implicit OR between selectors
                                             :not (:regexp "moon" :tag "planet")))))
       ;; Groups supply their own section names when none are given
       (:todo "WAITING" :order 8)  ; Set order of this section
       (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
              ;; Show this group at the end of the agenda (since it has the
              ;; highest number). If you specified this group last, items
              ;; with these todo keywords that e.g. have priority A would be
              ;; displayed in that group instead, because items are grouped
              ;; out in the order the groups are listed.
              :order 9)
       (:priority<= "B"
                    ;; Show this section after "Today" and "Important", because
                    ;; their order is unspecified, defaulting to 0. Sections
                    ;; are displayed lowest-number-first.
                    :order 1)
       ;; After the last group, the agenda will display items that didn't
       ;; match any of these groups, with the default order position of 99
       ))
    (org-super-agenda-mode))

  (defun make-orgcapture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "remember") (width . 80) (height . 16)
                  (top . 400) (left . 300)
                  (font . "-apple-Monaco-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1")
                  ))
    (select-frame-by-name "remember")
    (org-capture))
#+END_SRC

**** Htmlize for org-mode

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

*** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode "\\.yaml")
#+END_SRC

*** GO

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\.go"
    :config
    (add-hook 'go-mode-hook
              (lambda ()
                (add-hook 'before-save-hook 'gofmt-before-save)
                (add-to-list (make-local-variable 'company-backends)
                             '(company-go :width company-yasnippet :separate))
                (local-set-key (kbd "M-.") 'godef-jump))))
#+END_SRC

*** JSON

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :mode "\\.json$"
    :interpreter "json"
    :config
    (setq js-indent-level 2))

#+END_SRC

*** CSS

#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :mode "\\.css"
    :config
    :hook (css-mode . (lambda ()
                (add-to-list (make-local-variable 'company-backends)
                             '(company-css :width company-yasnippet :separate)))))
#+END_SRC

*** SCSS

#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :mode "\\.scss")
#+END_SRC

*** JS

#+BEGIN_SRC emacs-lisp
  ;; Enable tide-mode for .ts and .tsx files
  (use-package typescript-mode
    :mode ("\\.ts$"
           "\\.js$")
    :hook ((typescript-mode . setup-tide-mode)))

  (defun setup-tide-mode ()
    (message "Setting tide mode...")
    (tide-setup)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (prettier-js-mode)
    (company-mode +1)
    (tide-hl-identifier-mode +1)
    (flycheck-add-mode 'javascript-eslint 'typescript-mode))

  (use-package tide

    :after (flycheck typescript-mode)
    :config
    (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
    (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append))

  (use-package web-mode
    :mode ("\\.html\\'"
           "\\.php\\'"
           "\\.tsx\\'"
           "\\.svelte\\'"
           )
    :hook
    (web-mode . (lambda ()
                  (when (string-equal "tsx" (file-name-extension buffer-file-name))
                    (setup-tide-mode))))
    (web-mode . (lambda ()
                  (flycheck-add-mode 'javascript-eslint 'web-mode)))
    :config
    (setq web-mode-content-types-alist
          '(("html" . "\\.svelte\\'")
            ("jsx" . "\\.tsx\\'")
            ("jsx" . "\\.js[x]?\\'")
            ("js" . "\\.mjs?\\'")
            ("html" . "\\.html\\'"))))
#+END_SRC

*** Py

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config
    (elpy-enable))

  (use-package py-autopep8
    :hook (elpy-mode py-autopep8-enable-on-save))

  (use-package python-mode
    :mode "\\.py"
    :interpreter "py"
    :config
    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i --simple-prompt")

  )
#+END_SRC

* Other

#+BEGIN_SRC emacs-lisp
  ;; TODO: Use general for keybindings
  (load (expand-file-name "keys.el" user-emacs-directory))

  (defun my-delete-trailing-whitespace ()
    "Deleting trailing whitespaces."
    (when (derived-mode-p 'prog-mode)
      (delete-trailing-whitespace)))

  (message ".emacs loaded successfully.")

  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

#+END_SRC
